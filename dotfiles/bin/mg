#!/usr/bin/env bash

# Constants
WHITE='\e[37m'
CYAN='\e[36m'
MAGENTA='\e[35m'
BLUE='\e[34m'
YELLOW='\e[33m'
GREEN='\e[32m'
RED='\e[31m'
BLACK='\e[30m'

NC='\e[0m'

MAC_COLORS=true

if $MAC_COLORS; then
  WHITE='\033[37m'
  CYAN='\033[36m'
  MAGENTA='\033[35m'
  BLUE='\033[34m'
  YELLOW='\033[33m'
  GREEN='\033[32m'
  RED='\033[31m'
  BLACK='\033[30m'

  NC='\033[0m'
fi

DRY=false
RECURSIVE=false
MG_CONFIG=".mgrc"
GITLAB_TOKEN=""
GITLAB_URI=""
ONLY_REF=""
GLOB=""

# Usage {{{
usage() {
  cat << EOF 
usage: $(color_echo ${MAGENTA} "$(basename $0)") [$(color_echo ${YELLOW} "options")] <$(color_echo ${GREEN} "command")> [<$(color_echo ${BLUE} "args")>]

options:
  $(color_echo ${YELLOW} "--dry")
    Print commands from \`$(color_echo ${GREEN} "bump")' or \`$(color_echo ${GREEN} "exec")' instead of executing it

  $(color_echo ${YELLOW} "--debug")
    Show every executed commands

  $(color_echo ${YELLOW} "--only-ref") <$(color_echo ${BLUE} "ref")>
    Execute command only on project matching the given $(color_echo ${BLUE} "ref")

  $(color_echo ${YELLOW} "--glob") <$(color_echo ${BLUE} "glob")>
    Execute command only on project matching the given $(color_echo ${BLUE} "glob")

  $(color_echo ${YELLOW} "--recursive")
    Execute command recursively

$(color_echo ${NC} "commands"):
  $(color_echo ${GREEN} "status") [$(color_echo ${YELLOW} "--fetch")]
    show the status of every repo
      $(color_echo ${YELLOW} "--fetch")
        fetch repos to check remote branches (slower)

  $(color_echo ${GREEN} "diff")
    show diff on dirty repos

  $(color_echo ${GREEN} "bump") <$(color_echo ${BLUE} "version")> [$(color_echo ${YELLOW} "--always")] [$(color_echo ${YELLOW} "--overwrite")]
    bump to a new $(color_echo ${BLUE} "version") if needed on master
      $(color_echo ${YELLOW} "--always")
        bump $(color_echo ${BLUE} "version") even if there is no change
      $(color_echo ${YELLOW} "--overwrite")
        bump $(color_echo ${BLUE} "version") even if there is already a tag

  $(color_echo ${GREEN} "switch") [$(color_echo ${YELLOW} "--pull")] <$(color_echo ${BLUE} "branch")>
    switch to $(color_echo ${BLUE} "branch") if available
      $(color_echo ${YELLOW} "--pull")
        pull the $(color_echo ${BLUE} "branch") after switching

  $(color_echo ${GREEN} "changelog")
    Display content of the latest release.
    Based on annoted tags messages.

  $(color_echo ${GREEN} "exec") <$(color_echo ${BLUE} "command")>
    exec $(color_echo ${BLUE} "command") in each repo

  $(color_echo ${GREEN} "gitlab")
    see \`$(color_echo ${MAGENTA} "$(basename $0) gitlab help")'


ignore repositories:
  You can create a '.ignore-repo' file containing a list a folder to ignore.
  Ex:

  ./ignore-me
  ./and-me
EOF
}
# }}}

# Global Utils {{{
color_echo() {
  echo -e "${1}${2}${NC}"
}

color_echo_n() {
  echo -en "${1}${2}${NC}"
}

not_ignored () {
  ! grep -qs "${1}" ./.ignore-repo
}

match_glob () {
  test "${GLOB}" == "" \
    || [[ "${1}" =~ "${GLOB}" ]]
}

match_git_ref() {
  local project=$1
  test "${ONLY_REF}" == "" \
    || [[ "$(git -C "${project}" symbolic-ref --short HEAD)" =~ "${ONLY_REF}" ]]\
    || [[ "$(git -C "${project}" describe --tags --abbrev=0)"  =~ "${ONLY_REF}" ]]
}

display_repo_name() {
  echo -e "\n"
  color_echo $YELLOW "In repo '$(basename $(pwd))'"
}

iterate_git_run() {
  fn=$1
  shift

  _iterate_git_run $fn . $@
}

_iterate_git_run() {
  local fn=$1
  local parent_folder=$2
  shift; shift

  for folder in $(find . -mindepth 1 -maxdepth 1 -type d | sort); do
    local full_path=$(echo "$parent_folder/$folder" | sed 's@/\.@@g')

    if [ -d $folder/.git ]; then
      if not_ignored "$folder" && match_git_ref "$folder" && match_glob "$full_path"; then
        cd "${folder}"
        $fn "$full_path" $@
        cd ..
      fi
    elif ${RECURSIVE} && not_ignored "$folder"; then
      cd "${folder}"
      _iterate_git_run $fn "$full_path" $@
      cd ..
    fi
  done
}

is_clean() {
  git diff --quiet -- . ':(exclude)package-lock.json'
}

run() {
  if $DRY; then
    color_echo $YELLOW "Would run command \`$(echo $@)'"
  else
    $@
  fi
}

is_command_available() {
  if command -v ${1} >/dev/null 2>&1; then
    :
  else
    color_echo $RED "Missing command \`${1}' for gitlab integration"
    exit 1
  fi
}

# }}}

# Gitlab command {{{1
# Gitlab usage {{{2
gitlab_usage() {
  cat << EOF
usage: $(color_echo ${MAGENTA} "$(basename $0) gitlab") [$(color_echo ${YELLOW} "--uri") <$(color_echo ${BLUE} "uri")> | $(color_echo ${YELLOW} "--guess")]
                 [$(color_echo ${YELLOW} "--token") <$(color_echo ${BLUE} "token")>]
                 <$(color_echo ${GREEN} "command")> [<$(color_echo ${BLUE} "args")>]

options:
  $(color_echo ${YELLOW} "--uri") <$(color_echo ${BLUE} "gitlab_uri")>
    Specify gitlab server uri

  $(color_echo ${YELLOW} "--guess")
    Guess gitlab server uri from existing repositories

  $(color_echo ${YELLOW} "--token") <$(color_echo ${BLUE} "gitlab_token")>
    Auth token for gitlab api.
    If no token is provided, the personal_access_tokens page of gitlab
    will open to generate one. You'll be prompted to write the token
    so it can be saved for future requests.

commands:
  $(color_echo ${GREEN} "clone-group") [$(color_echo ${YELLOW} "--include-subgroups") [$(color_echo ${YELLOW} "--preserve-tree-structure")]] <$(color_echo ${BLUE} "group_name")>
    Clone every project in the given $(color_echo ${BLUE} "group"), a path of group and subgroups
    can be used

    options:
      $(color_echo ${GREEN} "--include-subgroups")
        Will clone all subgroups projects

      $(color_echo ${GREEN} "--preserve-tree-structure")
        Will clone subgroups in subfolders
EOF
}
# }}}2

# Gitlab utils {{{2
request_gitlab() {
  local RESOURCE=$1
  curl -s -H "Authorization: Bearer ${GITLAB_TOKEN}" "${GITLAB_URI}/api/v4/${RESOURCE}"
}

list_group_repo() {
  local PROJECT=$1

  local PROJECT_RESPONSE=$(request_gitlab "groups/${PROJECT}/projects" | jq -j '.[] | .id," ",.ssh_url_to_repo," ",.http_url_to_repo," ",.name,"\n"')
}

get_mr_count() {
  local PROJECT=$1
  local MR_PER_PROJECT=$(request_gitlab "groups/${PROJECT}/merge_resquests?state=opened" | jq '.[] | .project_id' | sort | uniq -c | awk '{ print $2" "$1 }')

  echo "${MR_PER_PROJECT}"
}

mr_per_repo() {
  join -o '1.2,2.2' -a 1 -a 2 -e 0 <(list_group_repo) <(get_mr_count)
}

gitlab_clone_group() {
  local GITLAB_REQUEST_PARAM="?order_by=name"
  local PRESERVE_TREE_STRUCTURE=false

  while test $# -gt 0 ; do
    case $1 in
      --include-subgroups)
        GITLAB_REQUEST_PARAM="${GITLAB_REQUEST_PARAM}&include_subgroups=true"
        ;;

      --preserve-tree-structure)
        PRESERVE_TREE_STRUCTURE=true
        ;;

      *)
        break
        ;;
    esac
    shift
  done

  local GROUP=${1//\//%2F}
  local REPOS=$(request_gitlab "groups/${GROUP}/projects${GITLAB_REQUEST_PARAM}" | jq '.[] | .name,.ssh_url_to_repo,.namespace.full_path')

  if [[ "$REPOS" = "" ]]; then
    color_echo $YELLOW "Nothing to clone. Try with '--include-subgroups'."
    exit 0
  fi

  local CLONE_COMMAND=""

  if $PRESERVE_TREE_STRUCTURE; then
    CLONE_COMMAND='TARGET=$(echo $2/$0 | sed "s@'$1'@@g" | sed "s/ /-/g" | sed "s@^/@@")'
  else
    CLONE_COMMAND='TARGET=${0// /-}'
  fi

  if $DRY; then
    CLONE_COMMAND="${CLONE_COMMAND}"';[ ! -d "$TARGET" ] && echo would clone "$1" in "$TARGET"'
  else
    CLONE_COMMAND="${CLONE_COMMAND}"';[ ! -d "$TARGET" ] && git clone "$1" "$TARGET"'
  fi

  echo ${REPOS} | xargs -n3 bash -c "${CLONE_COMMAND}"
}

save_gitlab_token() {
  color_echo $YELLOW "Opening browser to generate a new personal access token with api scope."
  xdg-open "${GITLAB_URI}/profile/personal_access_tokens" &
  sleep 1

  color_echo_n $YELLOW "Paste yout access token: "
  read GITLAB_TOKEN
  echo "GITLAB_TOKEN_${GITLAB_URI} ${GITLAB_TOKEN}" > ${MG_CONFIG}
}

load_gitlab_token() {
  if [ -f ${MG_CONFIG} ]; then
    GITLAB_TOKEN=$(cat "${MG_CONFIG}" | grep "GITLAB_TOKEN_${GITLAB_URI}" | cut -d ' ' -f 2)
  elif [ -f ~/${MG_CONFIG} ]; then
    GITLAB_TOKEN=$(cat "${MG_CONFIG}" | grep "GITLAB_TOKEN_${GITLAB_URI}" | cut -d ' ' -f 2)
  fi

  if [ "${GITLAB_TOKEN}" = "" ]; then
    save_gitlab_token
  fi
}

get_repo_url() {
  git remote get-url origin | cut -d '@' -f 2 | cut -d ':' -f 1
}

guess_gitlab_uri() {
  URIS=$(iterate_git_run get_repo_url | uniq)

  if [[ "$URIS" = "" ]]; then
    color_echo $RED "Could not guess anything. Please provide an gitlab uri with 'mg gitlab --uri \"https://gitlab.com\"'"
    exit 1
  fi

  GITLAB_URI=$(echo "https://$(echo "${URIS}" | head -1)")
  color_echo $YELLOW "Guessed ${GITLAB_URI}"
}
# }}}2

gitlab() {
  if [[ $# -eq 0 ]]; then
    gitlab_usage
    exit 1
  fi

  while : ; do
    case $1 in
      --uri)
        shift
        GITLAB_URI=$1
        ;;

      --token)
        shift
        GITLAB_TOKEN=$1
        ;;

      --guess)
        guess_gitlab_uri
        ;;

      -h|--help|help)
        gitlab_usage
        exit 0
        ;;

      *)
        break
        ;;
    esac
    shift
  done

  if [ "${GITLAB_URI}" = "" ]; then
    color_echo $RED "Missing uri for gitlab.\nTry with 'mg gitlab --guess' or 'mg gitlab --uri \"https://gitlab.com\"'"
    exit 1
  fi

  if [ "${GITLAB_TOKEN}" = "" ]; then
    load_gitlab_token
  fi

  GITLAB_COMMAND=$1
  shift

  if [ "${GITLAB_COMMAND}" = "" ]; then
    gitlab_usage
    exit 1
  fi


  case ${GITLAB_COMMAND} in
    clone-group)
      gitlab_clone_group $@
      ;;

    *)
      color_echo $RED "Unknown command: $GITLAB_COMMAND"
      usage
      exit 1
      ;;
  esac
}
# }}}1

# Status command {{{
# Status utils {{{

rev_list_to_arrows() {
	local left=${1:-0} right=${2:-0}
	[ $right -gt 0 ] && printf ⇣ || true
	[ $left -gt 0 ] && printf ⇡ || true
}

get_repo_info() {
  repo=${1}
  branch=$(git symbolic-ref --short HEAD | sed -e 's@origin/@@g')
  describe=$(git describe --tags 2>/dev/null || echo " ")
  arrows=$(rev_list_to_arrows $(git rev-list --left-right --count "HEAD...@{u}" 2>/dev/null || echo "1 0"))
  dirty=$(is_clean || color_echo ${RED} Yes)

  if $FETCH; then
    onlinePart="$(get_online_repo_info)"
  else
    onlinePart=""
  fi

  echo "${repo},${branch},${describe},${arrows:-" "},${onlinePart},${dirty}"
}

get_online_repo_info() {
  remoteRefs=$(git ls-remote origin)

  branchCount=$(echo "${remoteRefs}" | grep heads | grep -vP 'master|develop' | wc -l)
  mrList=$(echo "${remoteRefs}" | grep merge-request | sort -n -k 2.22 | tail -10 | awk '{ print $1  }' | xargs -I '{}' git branch -r --contains {} 2>/dev/null | grep -vP 'develop|master' | sed -e 's@origin/@@' | tr -d ' ' | sort | uniq)

  if [ -n "$mrList" ]; then
    mrCount=$(echo "${remoteRefs}" | grep heads | grep -F "$mrList" | wc -l)
  else
    mrCount=0
  fi

  echo "${branchCount},${mrCount}"
}

get_status_header() {
  if $FETCH; then
    onlinePart="$(get_online_status_header)"
  else
    onlinePart=""
  fi

  color_echo "${YELLOW}" "Repo,Branch,Describe,State,${onlinePart},Dirty?"
}

get_online_status_header() {
  echo "Branches,MR"
}

erase_previous_line() {
  echo -en "\r\033[2K"
}

fetch_repo() {
  erase_previous_line
  color_echo_n $YELLOW "Fetching $(basename $(pwd))..."
  git fetch -u origin >/dev/null 2>&1
}
# }}}

show_status() {
  # Status constants
  FETCH=false

  # Parse status args
  while test $# -gt 0
  do
    case $1 in
      --fetch)
        FETCH=true
        ;;

      *)
        color_echo $RED "Unknown parameter: $1"
        usage
        exit 1
        ;;
    esac
    shift
  done

  if $FETCH; then
    iterate_git_run fetch_repo
    erase_previous_line
  fi

  color_echo_n $YELLOW "Computing..."
  result="$(get_status_header)\n$(iterate_git_run get_repo_info)"
  erase_previous_line

  echo -e "${result}" | column -t -s ','
}
# }}}

# Diff command {{{1
# Diff utils {{{2
show_repo_diff() {
  if is_clean; then
    :
  else
    display_repo_name
    git --no-pager diff -- . ':(exclude)package-lock.json'
  fi
}
# }}}2

show_diff() {
  iterate_git_run show_repo_diff
}
# }}}1

# Switch command {{{1
# Switch utils {{{2
branch_exists() {
  git show-ref --verify --quiet refs/heads/$1 || git show-ref --verify --quiet refs/remotes/origin/$1 || test "$(git ls-remote --tags origin $1)" != ""
}

not_on_branch() {
  test "$(git rev-parse --abbrev-ref HEAD)" != "$1"
}

checkout_if_exists() {
  if not_on_branch $2 && branch_exists $2; then
    color_echo $YELLOW "Switching '$1' to '$2'..."
    git checkout --quiet $2

    if $PULL; then
      color_echo $YELLOW "Pulling '$2' in '$1'..."
      git pull --quiet
    fi
  fi
}
# }}}2

switch() {
  # Switch constant
  PULL=false
  TARGET=""

  while test $# -gt 0
  do
    case $1 in
      --pull)
        PULL=true
        ;;

      -*)
        color_echo $RED "Unknown switch option: ${1}"
        usage
        exit 1
        ;;

      *)
        TARGET=$1
        ;;
    esac
    shift
  done

  if [[ "$TARGET" = "" ]]; then
    color_echo $RED "No branch provided"
    exit 1
  fi

  iterate_git_run checkout_if_exists $TARGET
}
# }}}1

# Exec command {{{1
# Exec utils {{{2
exec_command_in_repo() {
  repo=$1
  shift

  color_echo $YELLOW "Executing '$(echo $@)' in '$repo'"
  run $@ || true
}
# }}}2

exec_command() {
  if [[ $# -eq 0 ]]; then
    color_echo $RED "No command provided"
    exit 1
  fi

  iterate_git_run exec_command_in_repo $@
}
# }}}1

# Bump command {{{1
# Bump utils {{{

need_tag() {
  test "$(git describe --tags)" != "$(git describe --tags --abbrev=0)"
}

tag_repo() {
  if ${ALWAYS} || need_tag; then
    if ${OVERWRITE}; then
      (git tags -l | grep -q "$2") && git tag -d "$2"
      (git ls-remote --tags | grep -q "$2") && git push --delete origin "refs/tags/$2"
    fi

    color_echo $YELLOW "Tagging '$1' with '$2', previous describe was '$(git describe --tags)'"
    message=$(git log --merges --format=%s $(git describe --abbrev=0)..HEAD | awk -F \' '{ print $2  }')
    run git tag $2 -m "${message:-$2}" || run git tag $2 -m "$2"
    run git push --quiet origin $2
  fi
}
# }}}2

bump() {
  # Bump constant
  ALWAYS=false
  OVERWRITE=false
  TAG=""

  while test $# -gt 0
  do
    case $1 in
      --always)
        ALWAYS=true
        ;;

      --overwrite)
        OVERWRITE=true
        ;;

      -*)
        color_echo $RED "Unknown bump option: ${1}"
        usage
        exit 1
        ;;

      *)
        TAG=$1
        ;;
    esac
    shift
  done

  if [[ "$TAG" = "" ]]; then
    color_echo $RED "No tag provided"
    exit 1
  fi

  switch --pull "master"
  iterate_git_run tag_repo $TAG
}
# }}}1

# Changelog command {{{1
# Changelog utils {{{2
show_tag_content() {
  display_repo_name
  git tag -l -n99 ${TAG:-$(git describe --tags --abbrev=0)}
}
# }}}2

changelog() {
  # Changelog constant
  TAG=""

  while test $# -gt 0
  do
    case $1 in
      *)
        TAG=$1
        ;;
    esac
    shift
  done

  iterate_git_run show_tag_content
}
# }}}1

# Look for global options
# {{{ Global option
while : ; do
  case $1 in
    --debug)
      set -x
      ;;

    --dry)
      DRY=true
      ;;

    --only-ref)
      shift
      ONLY_REF=$1
      ;;

    --glob)
      shift
      GLOB=$1
      ;;

    --recursive)
      RECURSIVE=true
      ;;

    *)
      break
      ;;
  esac
  shift
done
# }}}

# Main switch {{{
COMMAND=$1
shift

if [ "${COMMAND}" = "" ]; then
  usage
  exit 1
fi

set -eu

case ${COMMAND} in
  status)
    show_status $@
    ;;

  diff)
    show_diff $@
    ;;

  bump)
    bump $@
    ;;

  switch)
    switch $@
    ;;

  exec)
    exec_command $@
    ;;

  changelog)
    changelog $@
    ;;

  gitlab)
    is_command_available jq
    is_command_available curl
    gitlab $@
    ;;

  -h|--help|help)
    usage
    ;;

  *)
    color_echo $RED "Unknown command: ${COMMAND}"
    usage
    exit 1
    ;;
esac
# }}}

# vim: foldmethod=marker
