#!/usr/bin/env bash

# Constants
YELLOW='\e[33m'
GREEN='\e[32m'
RED='\e[31m'
NC='\e[0m'

DRY=false
MG_CONFIG=".mgrc"
GITLAB_TOKEN=""
GITLAB_URI=""

# Usage {{{
usage() {
  cat << EOF 
usage: $(basename $0) [options] <command> [<args>]

options:
  --dry
    Print commands from \`bump' or \`exec' instead of executing it

  --debug
    show every executed commands

commands:
  status [--fetch]
    show the status of every repo
      --fetch
        fetch repos to check remote branches (slower)

  diff
    show diff on dirty repos

  bump <version> [--always|--only-tag-matching <tag>] [--overwrite]
    bump to a new version if needed on master
      --always
        bump version even if there is no change
      --overwrite
        bump version even if there is already a tag
      --only-tag-matching <tag>
        only bump project with a tag matching the given tag

  switch [--pull] <branch>
    switch to branch if available
      --pull
        pull the branch after switching

  changelog
    Display content of the latest release.
    Based on annoted tags messages.

  exec <command>
    exec command in each repo

  gitlab
    see $(basename $0) gitlab help


ignore repositories:
  You can create a '.ignore-repo' file containing a list a folder to ignore.
  Ex:

  ./ignore-me
  ./and-me
EOF
}
# }}}

# Global Utils {{{
color_echo() {
  echo -e "${1}${2}${NC}"
}

color_echo_n() {
  echo -en "${1}${2}${NC}"
}

do_not_contains_element () {
  ! grep -qs "${1}" ./.ignore-repo
}

display_repo_name() {
  echo -e "\n"
  color_echo $YELLOW "In repo '$(basename $(pwd))'"
}

iterate_git_run() {
  fn=$1
  shift

  for folder in $(find . -maxdepth 1 -type d | sort); do
    if [ -d $folder/.git ] && do_not_contains_element "$folder"; then
      cd $folder
      $fn $folder $@
      cd ..
    fi
  done
}

is_clean() {
  git diff --quiet -- . ':(exclude)package-lock.json'
}

run() {
  if $DRY; then
    color_echo $YELLOW "Would run command \`$(echo $@)'"
  else
    $@
  fi
}

is_command_available() {
  if command -v ${1} >/dev/null 2>&1; then
    :
  else
    color_echo $RED "Missing command \`${1}' for gitlab integration"
    exit 1
  fi
}

# }}}

# Gitlab command {{{1
# Gitlab usage {{{2
gitlab_usage() {
  cat << EOF
usage: $(basename $0) gitlab [--uri <uri> | --guess]
                 [--token <token>]
                 <command> [<args>]

options:
  --uri <gitlab_uri>
    Specify gitlab server uri

  --guess
    Guess gitlab server uri from existing repositories

  --token <gitlab_token>
    Auth token for gitlab api.
    If no token is provided, the personal_access_tokens page of gitlab
    will open to generate one. You'll be prompted to write the token
    so it can be saved for future requests.

commands:
  clone-group <group_name>
    Clone every project in the given group, a path of group and subgroups
    can be used
EOF
}
# }}}2

# Gitlab utils {{{2
request_gitlab() {
  local RESOURCE=$1
  curl -s -H "Authorization: Bearer ${GITLAB_TOKEN}" "${GITLAB_URI}/api/v4/${RESOURCE}"
}

list_group_repo() {
  local PROJECT=$1

  local PROJECT_RESPONSE=$(request_gitlab "groups/${PROJECT}/projects" | jq -j '.[] | .id," ",.ssh_url_to_repo," ",.http_url_to_repo," ",.name,"\n"')
}

get_mr_count() {
  local PROJECT=$1
  local MR_PER_PROJECT=$(request_gitlab "groups/${PROJECT}/merge_resquests?state=opened" | jq '.[] | .project_id' | sort | uniq -c | awk '{ print $2" "$1 }')

  echo "${MR_PER_PROJECT}"
}

mr_per_repo() {
  join -o '1.2,2.2' -a 1 -a 2 -e 0 <(list_group_repo) <(get_mr_count)
}

gitlab_clone_group() {
  local GROUP=${1//\//%2F}
  request_gitlab "groups/${GROUP}/projects" | jq '.[] | .name,.ssh_url_to_repo' | xargs -n2 bash -c '[ ! -d "$0"  ] && git clone "$1" "$0"'
}

save_gitlab_token() {
  xdg-open "${GITLAB_URI}/profile/personal_access_tokens" &
  read GITLAB_TOKEN
  echo "GITLAB_TOKEN_${GITLAB_URI} ${GITLAB_TOKEN}" > ${MG_CONFIG}
}

load_gitlab_token() {
  if [ -f ${MG_CONFIG} ]; then
    GITLAB_TOKEN=$(cat "${MG_CONFIG}" | grep "GITLAB_TOKEN_${GITLAB_URI}" | cut -d ' ' -f 2)
  fi

  if [ "${GITLAB_TOKEN}" = "" ]; then
    save_gitlab_token
  fi
}

get_repo_url() {
  git remote get-url origin | cut -d '@' -f 2 | cut -d ':' -f 1
}

guess_gitlab_uri() {
  URIS=$(iterate_git_run get_repo_url | uniq)

  GITLAB_URI=$(echo "https://$(echo "${URIS}" | head -1)")
  color_echo $YELLOW "Guessed ${GITLAB_URI}"
}
# }}}2

gitlab() {
  if [[ $# -eq 0 ]]; then
    gitlab_usage
    exit 1
  fi

  while : ; do
    case $1 in
      --uri)
        shift
        GITLAB_URI=$1
        ;;

      --token)
        shift
        GITLAB_TOKEN=$1
        ;;

      --guess)
        guess_gitlab_uri
        ;;

      -h|--help|help)
        gitlab_usage
        exit 0
        ;;

      *)
        break
        ;;
    esac
    shift
  done

  if [ "${GITLAB_URI}" = "" ]; then
    color_echo $RED "Missing uri for gitlab"
    exit 1
  fi

  if [ "${GITLAB_TOKEN}" = "" ]; then
    load_gitlab_token
  fi

  GITLAB_COMMAND=$1
  shift

  if [ "${GITLAB_COMMAND}" = "" ]; then
    gitlab_usage
    exit 1
  fi


  case ${GITLAB_COMMAND} in
    clone-group)
      gitlab_clone_group $@
      ;;

    *)
      color_echo $RED "Unknown command: $GITLAB_COMMAND"
      usage
      exit 1
      ;;
  esac
}
# }}}1

# Status command {{{
# Status utils {{{

rev_list_to_arrows() {
	local left=${1:-0} right=${2:-0}
	[ $right -gt 0 ] && printf ⇣ || true
	[ $left -gt 0 ] && printf ⇡ || true
}

get_repo_info() {
  repo=$(basename $(pwd))
  branch=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} | sed -e 's@origin/@@g')
  describe=$(git describe --tags 2>/dev/null || echo " ") 
  arrows=$(rev_list_to_arrows $(git rev-list --left-right --count HEAD...@"{u}" 2>/dev/null || echo "1 0"))
  dirty=$(is_clean || color_echo ${RED} Yes)

  if $FETCH; then
    onlinePart="$(get_online_repo_info)"
  else
    onlinePart=""
  fi

  echo "${repo},${branch},${describe},${arrows:-" "},${onlinePart},${dirty}"
}

get_online_repo_info() {
  remoteRefs=$(git ls-remote origin)

  branchCount=$(echo "${remoteRefs}" | grep heads | grep -vP 'master|develop' | wc -l)
  mrList=$(echo "${remoteRefs}" | grep merge-request | sort -n -k 2.22 | tail -10 | awk '{ print $1  }' | xargs -I '{}' git branch -r --contains {} 2>/dev/null | grep -vP 'develop|master' | sed -e 's@origin/@@' | tr -d ' ' | sort | uniq)

  if [ -n "$mrList" ]; then
    mrCount=$(echo "${remoteRefs}" | grep heads | grep -F "$mrList" | wc -l)
  else
    mrCount=0
  fi

  echo "${branchCount},${mrCount}"
}

get_status_header() {
  if $FETCH; then
    onlinePart="$(get_online_status_header)"
  else
    onlinePart=""
  fi

  echo "Repo,Branch,Describe,State,${onlinePart},Dirty?"
}

get_online_status_header() {
  echo "Branches,MR"
}

erase_previous_line() {
  echo -en "\r\033[2K"
}

fetch_repo() {
  erase_previous_line
  color_echo_n $YELLOW "Fetching $(basename $(pwd))..."
  git fetch -u origin >/dev/null 2>&1
}
# }}}

show_status() {
  # Status constants
  FETCH=false

  # Parse status args
  while test $# -gt 0
  do
    case $1 in
      --fetch)
        FETCH=true
        ;;

      *)
        color_echo $RED "Unknown parameter: $1"
        usage
        exit 1
        ;;
    esac
    shift
  done

  if $FETCH; then
    iterate_git_run fetch_repo
    erase_previous_line
  fi

  color_echo_n $YELLOW "Computing..."
  result="$(get_status_header)\n$(iterate_git_run get_repo_info)"
  erase_previous_line

  echo -e "${result}" | column -t -n -s ','
}
# }}}

# Diff command {{{1
# Diff utils {{{2
show_repo_diff() {
  if is_clean; then
    :
  else
    display_repo_name
    git --no-pager diff -- . ':(exclude)package-lock.json'
  fi
}
# }}}2

show_diff() {
  iterate_git_run show_repo_diff
}
# }}}1

# Switch command {{{1
# Switch utils {{{2
branch_exists() {
  git show-ref --verify --quiet refs/heads/$1 || test "$(git ls-remote --tags origin $1)" != ""
}

not_on_branch() {
  test "$(git rev-parse --abbrev-ref HEAD)" != "$1"
}

checkout_if_exists() {
  if not_on_branch $2 && branch_exists $2; then
    color_echo $YELLOW "Switching '$1' to '$2'..."
    git checkout --quiet $2

    if $PULL; then
      color_echo $YELLOW "Pulling '$2' in '$1'..."
      git pull --quiet
    fi
  fi
}
# }}}2

switch() {
  # Switch constant
  PULL=false
  TARGET=""

  while test $# -gt 0
  do
    case $1 in
      --pull)
        PULL=true
        ;;

      -*)
        color_echo $RED "Unknown switch option: ${1}"
        usage
        exit 1
        ;;

      *)
        TARGET=$1
        ;;
    esac
    shift
  done

  if [[ "$TARGET" = "" ]]; then
    color_echo $RED "No branch provided"
    exit 1
  fi

  iterate_git_run checkout_if_exists $TARGET
}
# }}}1

# Exec command {{{1
# Exec utils {{{2
exec_command_in_repo() {
  repo=$1
  shift

  color_echo $YELLOW "Executing '$(echo $@)' in '$repo'"
  run $@ || true
}
# }}}2

exec_command() {
  if [[ $# -eq 0 ]]; then
    color_echo $RED "No command provided"
    exit 1
  fi

  iterate_git_run exec_command_in_repo $@
}
# }}}1

# Bump command {{{1
# Bump utils {{{

need_tag() {
  if [[ "$ONLY" != "" ]]; then
    [[ "$(git describe --tags --abbrev=0)" =~ "$ONLY" ]]
  else
    test "$(git describe --tags)" != "$(git describe --tags --abbrev=0)"
  fi
}

tag_repo() {
  if ${ALWAYS} || need_tag; then
    if ${OVERWRITE}; then
      (git tags -l | grep -q "$2") && git tag -d "$2"
      (git ls-remote --tags | grep -q "$2") && git push --delete origin "refs/tags/$2"
    fi

    color_echo $YELLOW "Tagging '$1' with '$2', previous describe was '$(git describe --tags)'"
    message=$(git log --merges --format=%s $(git describe --abbrev=0)..HEAD | awk -F \' '{ print $2  }')
    run git tag $2 -m "${message:-$2}"
    run git push --quiet origin $2
  fi
}
# }}}2

bump() {
  # Bump constant
  ALWAYS=false
  OVERWRITE=false
  TAG=""
  ONLY=""

  while test $# -gt 0
  do
    case $1 in
      --always)
        ALWAYS=true
        ;;

      --overwrite)
        OVERWRITE=true
        ;;

      --only-tag-matching)
        shift
        ONLY="$1"
        ;;

      -*)
        color_echo $RED "Unknown bump option: ${1}"
        usage
        exit 1
        ;;

      *)
        TAG=$1
        ;;
    esac
    shift
  done

  if [[ "$TAG" = "" ]]; then
    color_echo $RED "No tag provided"
    exit 1
  fi

  switch --pull "master"
  iterate_git_run tag_repo $TAG
}
# }}}1

# Changelog command {{{1
# Changelog utils {{{2
show_tag_content() {
  display_repo_name
  git tag -l -n99 ${TAG:-$(git describe --tags --abbrev=0)}
}
# }}}2

changelog() {
  # Changelog constant
  TAG=""

  while test $# -gt 0
  do
    case $1 in
      *)
        TAG=$1
        ;;
    esac
    shift
  done

  iterate_git_run show_tag_content
}
# }}}1

# Look for global options
while : ; do
  case $1 in
    --debug)
      set -x
      ;;

    --dry)
      DRY=true
      ;;

    *)
      break
      ;;
  esac
  shift
done

COMMAND=$1
shift

if [ "${COMMAND}" = "" ]; then
  usage
  exit 1
fi

set -eu

case ${COMMAND} in
  status)
    show_status $@
    ;;

  diff)
    show_diff $@
    ;;

  bump)
    bump $@
    ;;

  switch)
    switch $@
    ;;

  exec)
    exec_command $@
    ;;

  changelog)
    changelog $@
    ;;

  gitlab)
    is_command_available jq
    is_command_available curl
    gitlab $@
    ;;

  -h|--help|help)
    usage
    ;;

  *)
    color_echo $RED "Unknown command: ${COMMAND}"
    usage
    exit 1
    ;;
esac

# vim: foldmethod=marker
